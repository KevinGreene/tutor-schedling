package com.surrealanalysis.tutoring
dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import com.surrealanalysis.tutor.scheduling.domain.*
import java.util.List

global HardSoftScoreHolder scoreHolder;

rule "Tutors should be free when scheduled"
    when
        TutoringSession(tutorAssigned, $tutor: tutor, $hour: hour, !tutor.isFreeForHour($hour))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


rule "Tutors should only be scheduled for a single table"
    when
        TutoringSession($id: id, tutorAssigned, $tutor: tutor, $table: table)
        TutoringSession(id > $id, $tutor == tutor, $table != table)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Students should only be scheduled for a single session"
    when
        TutoringSession($id: id, studentAssigned, $student: student, studentAssigned)
        TutoringSession(id > $id, $student == student)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Students should be scheduled for a session"
    when
        $student: Student()
        not TutoringSession(student == $student)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Tutors should have at least 2 students"
    when
        $tutor: Tutor()
        Number(intValue < 2) from accumulate(
            $session:TutoringSession(studentAssigned == true, $tutor == tutor),
            count($session))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Tutors should have a roughly equal number of students"
    when
        $tutor: Tutor($status: status)
        $totalStudents: Number(intValue > 0) from accumulate(
            $session:TutoringSession(studentAssigned, $tutor == tutor),
            count($session))
    then
        int multiplier = $status == EmploymentStatus.FULL_TIME ? 1 : 2;
        int studentFactor = (int) Math.pow($totalStudents.intValue() * multiplier, 2);
        scoreHolder.addSoftConstraintMatch(kcontext, -studentFactor);
end

rule "Optimal Tutor score balance"
    when
        $tutorCountNumber: Number() from accumulate(
            $tutor:Tutor(),
            count($tutor))
        $totalStudentNumber: Number() from accumulate(
            $session:TutoringSession(studentAssigned),
            count($session))
    then
        int tutorCount = $tutorCountNumber.intValue();
        int totalStudents = $totalStudentNumber.intValue();
        int quotient = totalStudents / tutorCount;
        int remainder = totalStudents % tutorCount;
        int quotientFactor = quotient * quotient * tutorCount;
        int remainderFactor = remainder * quotient * (quotient + 1);
        scoreHolder.addSoftConstraintMatch(kcontext, quotientFactor + remainderFactor);
end